АВТОНОМНАЯ НЕКОММЕРЧЕСКАЯ ОРГАНИЗАЦИЯ ДОПОЛНИТЕЛЬНОГО ПРОФЕССИОНАЛЬНОГО ОБРАЗОВАНИЯ «АКАДЕМИЯ ТОП» 


Филиал «Академия TOP г. Астрахань»


Валуйсков Игорь Евгеньевич


Программа «Разработка системы управления запасами на складе»



Дипломная работа выполнена в рамках изучения дисциплины 
«Создание web-приложений с использованием Python» 


Направление подготовки: Годичные курсы



    
    Заведующий учебной кафедрой   ____________ Соболев  А.В.
      Основной преподаватель   ____________   Макаров М.Н.
«17» апреля 2025 г.

Астрахань – 2025
      
ОГЛАВЛЕНИЕ
ВВЕДЕНИЕ	3
1 АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ	4
1.1 Описание пригородных электричек и их роли в транспортной системе города	4
1.2 Основные принципы построения расписания движения поездов	5
2 РАЗРАБОТКА ИНФОРМАЦИОННОЙ СИСТЕМЫ ПРИГОРОДНЫХ ЭЛЕКТРИЧЕК	7
2.1 Используемые технологии	7
2.2 Алгоритм работы программы	7
2.3 Описание программного кода	7
2.4 Инструкция по эксплуатации программного продукта	9
3 ТЕСТИРОВАНИЕ И АНАЛИЗ РЕЗУЛЬТАТОВ РАБОТЫ ИНФОРМАЦИОННОЙ СИСТЕМЫ	14
ЗАКЛЮЧЕНИЕ	15
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ	16
ПРИЛОЖЕНИЕ 1	17
ПРИЛОЖЕНИЕ 2	18
ПРИЛОЖЕНИЕ 3	27
      
      
     ВВЕДЕНИЕ
      Современные складские системы играют ключевую роль в логистике и бизнесе. Эффективное управление запасами позволяет минимизировать затраты, оптимизировать работу склада и обеспечивать бесперебойные поставки продукции. Автоматизация складских процессов становится важным направлением развития предприятий, позволяя ускорить учет и движение товаров, а также повысить точность данных.
      В данной дипломной работе рассматриваются принципы разработки системы управления запасами, которая позволяет автоматизировать процессы учета, анализа и прогнозирования потребностей склада. Будут рассмотрены современные подходы к управлению запасами, методы оптимизации и выбор технологических решений для реализации системы.
      Целью работы является разработка программного обеспечения, предназначенного для эффективного управления запасами на складе.
     Задачи дипломной работы:
      • Анализ существующих методов управления запасами и их применение на практике.
      • Разработка модели управления запасами с учетом оптимизации ресурсов.
      • Создание программного обеспечения, обеспечивающего автоматизированный учет и контроль складских запасов.
      • Тестирование разработанной системы и анализ ее эффективности.
      Объектом исследования является складское хозяйство предприятия, а предметом – программная система, предназначенная для управления запасами.
      Разработка данной системы позволит автоматизировать рутинные процессы, повысить точность учета и минимизировать ошибки, что в конечном итоге приведет к повышению эффективности управления складом.
      1 АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ
      1.1 Описание пригородных электричек и их роли в транспортной системе города
      Пригородные электрички – это средство массовой транспортной связи, которое используется для перевозки пассажиров между городом и его пригородами. Они играют важную роль в транспортной системе города, обеспечивая своевременную и комфортную доставку пассажиров на работу, учебу, в различные места отдыха и т.д.
      Одним из направлений деятельности железнодорожного вокзала является ведение расписания движения поездов, содержащего информацию о станциях назначения, маршруте следования поезда, дате и времени прибытия и отбытия. Перевозка пассажиров пригородными электричками происходит по расписанию, которое составляется с учетом времени отправления и прибытия поезда, количества поездов на линии и интервала между ними.
      Главными пользователями пригородных электричек являются пассажиры, для которых необходимо обеспечить комфортабельную, безопасную и регулярную транспортную связь между домом и работой или учебой. Они могут использовать пригородные электрички для поездок на каждый день или периодически, в зависимости от места жительства, работы, учебы и других факторов. Именно поэтому расписание пригородных электричек является ключевой информационной системой, которая должна обеспечивать своевременную и точную информацию для пассажиров обо всех изменениях в расписании, задержках и возможных обстоятельствах, связанных с использованием этой транспортной услуги. Это позволяет пассажирам планировать свои поездки более эффективно и избегать нежелательных ситуаций. Для создания такой информационной системы необходимо провести анализ требований пользователя и определить, какие функции и возможности должны быть доступны в этом решение. Важное значение имеет точность и своевременность получаемой информации, анализ наиболее частых и серьезных возможных проблем и ошибок в системе, чтобы повысить качество и устойчивость функционирования.
         
      1.2 Основные принципы построения расписания движения поездов
      Основными принципами построения расписания движения поездов являются:
      1. Учет графика движения поездов: расписание должно учитывать график движения поездов, который определяет время отправления и прибытия поездов на каждой станции. Существует пиковое время, когда спрос на транспорт возрастает, необходимо планировать составы поездов и частоту их движения с учетом этого фактора.
      2. Учет времени хода поезда - при построении расписания следует учитывать время движения поезда между станциями на маршруте. Это позволяет определить соответствующее время отправления и прибытия, а также время движения между важными для пассажиров станциями и остановками.
      3. Учет времени на остановках: расписание должно учитывать время, которое поезд будет проводить на остановках, чтобы определить точное время отправления и прибытия.
      4. Учет скорости движения поездов: расписание должно учитывать скорость движения поездов, чтобы определить точное время прибытия на каждую станцию.
      5. Учет возможных задержек и отмен: расписание должно учитывать возможные задержки и отмены поездов, чтобы обеспечить своевременное и точное информирование пассажиров.
      6. Оптимизация времени и ресурсов: расписание должно быть оптимизировано с точки зрения использования ресурсов и времени, чтобы обеспечить максимальную эффективность работы железнодорожной компании.
      2 РАЗРАБОТКА ИНФОРМАЦИОННОЙ СИСТЕМЫ ПРИГОРОДНЫХ ЭЛЕКТРИЧЕК
      2.1 Используемые технологии 
      Для реализации программы «Информационная система пригородных электричек» использовалась среда Microsoft Visual Studio Community 2019 версии 16.11.26.
      
      2.2 Алгоритм работы программы
      Алгоритм программы можно представить в виде блок – схемы представленной в приложении 1.
      
      2.3 Описание программного кода
      Код программы «Информационная система пригородных электричек», представленный в приложении 2, состоит из двух классов Time и Train, функций KolELFrontFile, ReadFromFile, WriteInFile, DelInFile для работы с текстовым файлом, функций поиска SearchNumberTrain, SearchDepartureStation, SearchDestinationStation, а также функции вызова главного меню MainMenu и главной функции main.
      Классы Time и Train используются для удобной и структурированной работы с данными. В частности, класс Time используется для представления времени в формате «часы:минуты». Класс Train используется для представления расписания пригородной элетрички.
      Функция KolELFrontFile принимает на вход название файла «namefile», затем открывает этот файл и считывает первое число из файла и сохраняет его в переменную «k». Эта функция используется для определения количества элементов, которые фактически находятся в файле.
      Функция ReadFromFile позволяет считывать данные расписания из текстового файла. Данная функция принимает на вход указатель на массив объектов класса Train и название файла «namefile». Затем открывает этот файл и считывает данные как строки с помощью функции getline(). Затем считанные строки преобразуются к нужному формату и сохраняются в соответствующие поля объектов в объекте «train».
      Функция WriteInFile предназначена для добавления нового пути в текстовый файл с данными, введенного пользователем в главной функции main. Функция принимает на вход количество элементов – «KolTrain», название файла – «namefile» и указатель на массив объектов класса Train – «newtrain». Затем открывает файл для записи и записывает количество элементов. Затем записывает поля объекта «newtrain» в файл с помощью метода AddToFile класса Train.
      Функция DelInFile предназначена для удаления пути из текстового файла. Данная функция принимает на вход название файла – «namefile», указатель на массив объектов класса Train – «newtrain» и количество элементов – «KolTrain». Затем открывает файл для записи и записывает количество элементов. Затем записывает поля объекта «newtrain» в файл построчно с помощью методов доступа к полям класса Train. 
      Функция SearchNumberTrain принимает на вход указатель на массив объектов класса Train и количество элементов – «KolTrain», а также номер поезда, который нужно найти - «number». Затем функция перебирает все элементы массива, сравнивая номер поезда каждого объекта с заданным номером. Если номера совпадают, то на экран выводятся данные о найденном поезде. Если ни один объект не имеет заданный номер поезда, то выводится сообщение о том, что таких поездов нет.
      Функция SearchDepartureStation принимает на вход указатель на массив объектов  класса Train и количество элементов – «KolTrain», а также название станции отправления, которое нужно найти – «departure_station». Затем функция перебирает все элементы массива, сравнивая название станции отправления каждого объекта с заданным названием. Если названия совпадают, то на экран выводятся данные о найденном поезде. Если ни один объект не отправляется с заданной станции, то выводится сообщение о том, что в расписании нет таких станций отправления.
      Функция SearchDestinationStation принимает на вход указатель на массив объектов класса Train и количество элементов – «KolTrain», а также название станции прибытия, которое нужно найти – «destination_station». Затем функция перебирает все элементы массива, сравнивая название станции прибытия каждого объекта с заданным названием. Если названия совпадают, то на экран выводятся данные о найденном поезде. Если ни один объект не прибывает на заданную станцию, то выводится сообщение о том, что в расписании нет таких станций прибытия.
      Функция MainMenu выводит на экран главное меню информационной системы пригородных электричек, в котором доступны различные действия. Пользователь выбирает действие, введя соответствующую цифру, и программа сохраняет выбор пользователя в переменной «StateM». Если пользователь ввел некорректную цифру, то программа запрашивает ввод нового действия, пока пользователь не введет корректную цифру. В конце функция возвращает управление вызывающей ее функции.
      Основная функция main представляет собой цикл, который предоставляет пользователю различные варианты и выполняет соответствующие действия на основе пользовательского ввода.
      
      2.4 Инструкция по эксплуатации программного продукта
      Программа предназначена для наиболее удобной и эффективной работы пользователя с расписаниями поездов, хранящихся в текстовых файлах. Пользователь может посмотреть полное расписание и воспользоваться следующими функциями: 
      1. Изменить расписание:
          a. Добавить поезд.
          b. Удалить поезд.    
      2. Поиск в расписании:
          a. По номеру поезда.
          b. По станции отправления.
          c. Про станции прибытия.
      Для того чтобы программа работала в полной мере, необходимо убедиться в наличии текстового файла «ScheduleTrainFile.txt» с расписанием поездов, которые хранятся внутри папки с программой, иначе функции будут выдавать сообщение «Ошибка открытия файла».
      Главное меню программы представлено на рисунке 1.
      
      Рис. 1: Главное меню программного обеспечения
      Для просмотра расписания движения электричек необходимо ввести цифру «1», после чего на экране появляются данные с расписанием электричек (Рис.2). Данные содержат информацию о номере поезда, станциях отправления и прибытия, а также о времени отправления и прибытия.
         
      Рис. 2: Вывод расписания на экран
      Для поиска по номеру поезда необходимо ввести цифру «2» в главном меню. Далее вводится номер поезда в соответствующее поле и нажимается кнопка "Enter" на клавиатуре. Если поезд с таким номером есть в расписании, на экране появится информация о расписании этого поезда (Рис. 3).
      
      Рис. 3: Поиск по номеру поезда
      Для поиска по станции отправления необходимо ввести цифру «3» в главном меню. Данный поиск проводится аналогично предыдущему поиску (Рис. 4).
      
      Рис. 4: Поиск по станции отправления
      Для поиска по станции прибытия необходимо ввести цифру «4» в главном меню. Данный поиск проводится аналогично предыдущему поиску (Рис. 5).
      
      Рис. 5: Поиск по станции прибытия
      Чтобы добавить новый путь необходимо ввести цифру «5» в главном меню. Далее вводятся номер поезда, названия станций отправления и прибытия, а также время отправления и прибытия в соответствующие поля (Рис. 6). Добавленный путь вносится в текстовый файл с данными.
      
      Рис. 6: Добавление нового пути
      Чтобы удалить путь из расписания необходимо ввести цифру «6» в главном меню. Далее требуется ввести номер расписания, который необходимо будет удалить (Рис. 7). После программа удаляет соответствующее расписание из текстового файла с данными.
      Если же пользователь не хочет удалить ни одно из расписаний, то ему необходимо ввести цифру «0».
      
      Рис. 7: Удаление пути
      Для выхода из программы необходимо ввести цифру «0», после чего завершается работа программы.
      3 ТЕСТИРОВАНИЕ И АНАЛИЗ РЕЗУЛЬТАТОВ РАБОТЫ ИНФОРМАЦИОННОЙ СИСТЕМЫ
      Тестирование программы «Информационная система пригородных электричек» включала  следующие этапы:
      • Тестирование функциональности ввода данных:
          * Проверка корректности ввода номера поезда, времени отправления и прибытия, станции отправления и прибытия;
          * Проверка ввода некорректных данных.
      • Тестирование функциональности вывода расписания. 
      • Тестирование поиска конкретного расписания:
          * Проверка поиска по номеру поезда и станции отправления/прибытия;
          * Проверка вывода соответствующего сообщения, если расписание не найдено.
      • Тестирование функциональности добавления и удаления расписания:
          * Проверка добавления новых путей в расписание;
          * Проверка удаления путей из существующего расписания.
      Тестирование представлено в виде таблицы в приложении 3.
      Результаты тестирования показали, что информационная система работает корректно в различных условиях.
      
     ЗАКЛЮЧЕНИЕ
     В процессе выполнения дипломной работы было разработано консольное приложение «Информационная система пригородных электричек», созданная на языке программирования C++, предназначена для управления расписанием движения поездов. Программа позволяет выполнять операции поиска расписания по номеру поездов, а также по станции отправления и прибытия. Кроме того, программа обладает возможностью добавления новых путей, а также удаления путей из существующего расписания.
     Консольное приложение использует файл «ScheduleTrainFile.txt» для хранения информации о расписании движения поездов. 
     Результаты тестирования показали, что программа работает корректно во всех предполагаемых ситуациях.
     В целом, программа обладает возможностью управления расписанием движения электричек, и ее функциональность может быть расширена, например, за счет реализации оповещения о задержке поезда или же возможностью покупкой билетов на соответствующий рейс.

      СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ
      1. C и C++ в Visual Studio - https://learn.microsoft.com/ru-ru/cpp/overview/visual-cpp-in-visual-studio?view=msvc-170
      2. Учебное пособие. Программирование на языке С++ – Режим доступа: https://portal.tpu.ru


ПРИЛОЖЕНИЕ 1
Схема алгоритма работы программного продукта

Рис.: Алгоритм работы программного продукта
ПРИЛОЖЕНИЕ 2
Код программного обеспечения 
«Информационная система пригородных электричек»

#include <iostream>
#include <windows.h>
#include <fstream>
#include <string>
#include <iomanip>

using namespace std;

class Time {
private:
    int hour, minute;

public:

    Time() {
        hour = 0;
        minute = 0;
    }
    void SetParam(int h, int m) {
        hour = h;
        minute = m;
    }

    int get_hour() {
        return hour;
    }

    int get_minute() {
        return minute;
    }

    friend ostream& operator<<(ostream& c, const Time& T);
    friend istream& operator>>(istream& c, Time& T);
};

ostream& operator<<(ostream& c, const Time& T) {
    c << setfill('0') << setw(2) << T.hour << ":" << setfill('0') << setw(2) << T.minute;
    return c;
}

istream& operator>>(istream& c, Time& T) {
    cout << "Час: "; c >> T.hour;
    while (T.hour > 23 || T.hour < 0) {
        cout << "Часы введены неверно! Введите заново: ";
        c >> T.hour;
    }
    cout << "Минуты: "; c >> T.minute;
    while (T.minute > 59 || T.minute < 0) {

        cout << "Минуты введены неверно! Введите заново: ";
        c >> T.minute;
    }
    return c;
}

class Train {
private:
    int numberTrain; //Номер поезда 
    string origin; //Станция отправления
    string destination; //Станция назначения
    Time departure_time; //Время отправления
    Time arrival_time; //Время прибытия

public:
    void SetParametrs(int number, string A, string B, int a_hour, int a_minute, int b_hour, int b_minute) {
        numberTrain = number;
        origin = A;
        destination = B;
        departure_time.SetParam(a_hour, a_minute);
        arrival_time.SetParam(b_hour, b_minute);
    }

    int get_numberTrain() {
        return numberTrain;
    }

    string get_origin() {
        return origin;
    }

    string get_destination() {
        return destination;
    }

    int get_dt_hour() {
        return departure_time.get_hour();
    }

    int get_dt_min() {
        return departure_time.get_minute();
    }

    int get_at_hour() {
        return arrival_time.get_hour();
    }

    int get_at_min() {
        return arrival_time.get_minute();
    }

    friend ostream& operator<<(ostream& c, const Train& T);

    void AddToFile(string namefile) {
        ofstream fout(namefile, std::ios::app);

        if (fout.is_open()) {
            fout << numberTrain << endl
                << origin << endl << destination << endl
                << departure_time.get_hour() << endl << departure_time.get_minute() << endl
                << arrival_time.get_hour() << endl << arrival_time.get_minute() << endl;
        }
        else cout << "Ошибка открытия файла. \n";
        fout.close();
    }
};

ostream& operator<<(ostream& c, const Train& T) {
    c << "№ поезда: " << T.numberTrain << endl
        << "Маршрут: " << T.origin << " - " << T.destination << endl
        << "Время отправления: " << T.departure_time << endl
        << "Время прибытия: " << T.arrival_time << endl;
    return c;
}

int KolELFrontFile(string namefile) {
    ifstream fin(namefile); //создаем объект для чтения из файла
    int k = 0;

    if (fin.is_open()) {
        fin >> k;
    }
    else cout << "Ошибка открытия файла. \n";
    fin.close();
    return k;
}

void ReadFromFile(Train* train, string namefile) {
    ifstream fin(namefile);
    int k;

    int number;
    string x, A, B;
    int a_hour, a_minute, b_hour, b_minute;

    if (fin.is_open()) {
        getline(fin, x);
        k = stoi(x);
        for (int i = 0; i < k; i++) {
            getline(fin, x);
            number = stoi(x);
            getline(fin, x);
            A = x;
            getline(fin, x);
            B = x;
            getline(fin, x);
            a_hour = stoi(x);
            getline(fin, x);
            a_minute = stoi(x);
            getline(fin, x);
            b_hour = stoi(x);
            getline(fin, x);
            b_minute = stoi(x);
            train[i].SetParametrs(number, A, B, a_hour, a_minute, b_hour, b_minute);
        }
    }
    else cout << "Ошибка открытия файла. \n";
    fin.close();
}

void WriteInFile(int KolTrain, string namefile, Train* newtrain) {
    ofstream fout(namefile, std::ios::out);

    if (fout.is_open()) {
        fout << KolTrain << endl;
        for (int i = 0; i < KolTrain; i++) {
            newtrain[i].AddToFile(namefile);
        }
    }
    else cout << "Ошибка открытия файла. \n";
    fout.close();
}

void DelInFile(string namefile, Train* newtrain, int KolTrain) {
    ofstream fout(namefile, std::ios::out);

    if (fout.is_open()) {
        fout << KolTrain << endl;
        for (int i = 0; i < KolTrain; i++) {
            fout << newtrain[i].get_numberTrain() << endl
                << newtrain[i].get_origin() << endl << newtrain[i].get_destination() << endl
                << newtrain[i].get_dt_hour() << endl << newtrain[i].get_dt_min() << endl
                << newtrain[i].get_at_hour() << endl << newtrain[i].get_at_min() << endl;
        }
    }
    else cout << "Ошибка открытия файла. \n";
    fout.close();
}

void SearchNumberTrain(Train* train, int KolTrain, int number) {
    int flag = 0;
    for (int i = 0; i < KolTrain; i++)
        if (train[i].get_numberTrain() == number) {
            flag = 1;
            cout << endl << train[i] << endl;
        }
    if (flag == 0) cout << "\nВ расписании таких поездов нет.\n";
}

void SearchDepartureStation(Train* train, int KolTrain, string departure_station) {
    int flag = 0;
    for (int i = 0; i < KolTrain; i++)
        if (train[i].get_origin() == departure_station) {
            flag = 1;
            cout << endl << train[i] << endl;
        }

    if (flag == 0) cout << "\nВ расписании нет таких станций отправления.\n";
}

void SearchDestinationStation(Train* train, int KolTrain, string destination_station) {
    int flag = 0;
    for (int i = 0; i < KolTrain; i++)
        if (train[i].get_destination() == destination_station) {
            flag = 1;
            cout << endl << train[i] << endl;
        }

    if (flag == 0) cout << "\nВ расписании нет таких станций прибытия.\n";
}

int StateM; //состояние главного меню
void MainMenu()
{

    cout << "\nИНФОРМАЦИОННАЯ СИСТЕМА ПРИГОРОДНЫХ ЭЛЕКТРИЧЕК\n\n"
        << "МЕНЮ\n"
        << "(0)  Выход из программы.\n"
        << "(1)  Вывод расписания движения пригородных электричек.\n"
        << "(2)  Поиск по номеру поезда\n"
        << "(3)  Поиск по станции отправления\n"

        << "(4)  Поиск по станции прибытия\n"
        << "(5)  Добавление нового пути\n"
        << "(6)  Удаление пути\n\n"
        << "Введите действие: ";
    cin >> StateM;
    while (StateM > 6 || StateM < 0)
    {
        cout << "Такого пункта в меню нет. Введите новое действие: ";
        cin >> StateM;
    }
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    //Считывание данных из файла
    string ScheduleTrain = { "ScheduleTrainFile.txt" };
    int KolTrain;

    system("cls"); //Удалить все записи с консоли
    MainMenu();

    while (StateM != 0)
    {
        if (StateM == 1) {
            system("cls");
            KolTrain = KolELFrontFile(ScheduleTrain);
            Train* train = new Train[KolTrain];
            ReadFromFile(train, ScheduleTrain);

            cout << "\nРасписание пригородных электричек:\n\n";
            for (int i = 0; i < KolTrain; i++)
                cout << train[i] << endl;

            system("pause");
            system("cls");
            MainMenu();
            system("cls");
        }

        if (StateM == 2) {
            system("cls");
            KolTrain = KolELFrontFile(ScheduleTrain);
            Train* train = new Train[KolTrain];
            ReadFromFile(train, ScheduleTrain);

            int number;

            cout << "\nВведите номер поезда: ";
            cin >> number;
            while (number < 0)
            {
                cout << "Ошибка! Номер поезда введен неверно! Введите заново: ";
                cin >> number;
            }

            cout << "\nРасписание движение поезда №" << number << ":\n";
            SearchNumberTrain(train, KolTrain, number);

            system("pause");
            system("cls");
            MainMenu();
            system("cls");
        }

        if (StateM == 3) {
            system("cls");
            KolTrain = KolELFrontFile(ScheduleTrain);
            Train* train = new Train[KolTrain];
            ReadFromFile(train, ScheduleTrain);

            string departure_station;
            cout << "\nВведите станцию отправления: ";
            getline(cin >> ws, departure_station);

            cout << "\nРасписание движения по станции отправления \"" << departure_station << "\":\n";
            SearchDepartureStation(train, KolTrain, departure_station);

            system("pause");
            system("cls");
            MainMenu();
            system("cls");
        }

        if (StateM == 4) {
            system("cls");
            KolTrain = KolELFrontFile(ScheduleTrain);
            Train* train = new Train[KolTrain];
            ReadFromFile(train, ScheduleTrain);

            string destination_station;
            cout << "\nВведите станцию прибытия: ";
            getline(cin >> ws, destination_station);

            cout << "\nРасписание движения по станции прибытия \"" << destination_station << 

"\":\n";
            SearchDestinationStation(train, KolTrain, destination_station);

            system("pause");
            system("cls");
            MainMenu();
            system("cls");
        }

        if (StateM == 5) {
            system("cls");
            int number;
            string departure_station, destination_station;
            Time d_time, a_time;
            cout << "\nДобавление нового пути:\n\n"
                << "Введите данные:\n"
                << "Номер поезда: ";
            cin >> number;
            while (number < 0)
            {
                cout << "Ошибка! Номер поезда введен неверно! Введите заново: ";
                cin >> number;
            }

            cout << "Станция отправления: ";
            getline(cin >> ws, departure_station);

            cout << "Станция прибытия: ";
            getline(cin >> ws, destination_station);

            cout << "Время отправления: \n";
            cin >> d_time;

            cout << "Время прибытия: \n";
            cin >> a_time;

            KolTrain = KolELFrontFile(ScheduleTrain);
            Train* newtrain = new Train[KolTrain + 1];
            ReadFromFile(newtrain, ScheduleTrain);
            newtrain[KolTrain].SetParametrs(number, departure_station, destination_station,
                d_time.get_hour(), d_time.get_minute(), a_time.get_hour(), a_time.get_minute());
            WriteInFile(KolTrain + 1, ScheduleTrain, newtrain);

            KolTrain = KolELFrontFile(ScheduleTrain);
            Train* train = new Train[KolTrain];
            ReadFromFile(train, ScheduleTrain);

            system("pause");

            system("cls");
            MainMenu();
            system("cls");
        }

        if (StateM == 6) {
            system("cls");
            KolTrain = KolELFrontFile(ScheduleTrain);
            Train* train = new Train[KolTrain];
            ReadFromFile(train, ScheduleTrain);

            int number = 0;
            string departure_station = "", destination_station = "";
            Time d_time, a_time;

            int index;
            cout << "\nВыберите номер расписания, которого хотите удалить от 1 до " << KolTrain << ": "
                <<"\nЕсли не хотите удалять путь, то введите 0: ";
            cin >> index;
            while(index < 0 || index > KolTrain){
                cout << "Такого расписания нет. Введите другой номер: ";
                cin >> index;
            }

            if (index != 0) {
                Train* newtrain = new Train[KolTrain - 1];
                int j = 0;

                for (int i = 0; i < index - 1; i++) {
                    newtrain[j] = train[i];
                    j++;
                }

                for (int i = index; i < KolTrain; i++) {
                    newtrain[j] = train[i];
                    j++;
                }

                delete[] train;

                KolTrain--;
                DelInFile(ScheduleTrain, newtrain, KolTrain);

                KolTrain = KolELFrontFile(ScheduleTrain);
                train = new Train[KolTrain];
                ReadFromFile(train, ScheduleTrain);
            }

                system("pause");
                system("cls");
                MainMenu();
                system("cls");
            
        }

    }

    cout << "\nРабота завершена.\n";
    return 0;
}

       ПРИЛОЖЕНИЕ 3
Тестирование программы «Информационная система пригородных электричек»

Таблица 1
       Тестирование поиска по номеру поезда
№ тестаТестовые данныеРезультат работы программы13802№ поезда: 3802
Маршрут: Карагали - Стадион
Время отправления: 10:30
Время прибытия: 11:30

№ поезда: 3802
Маршрут: Стадион - Карагали
Время отправления: 17:00
Время прибытия: 18:002-2Ошибка! Номер поезда введен неверно! Введите заново:31034В расписании таких поездов нет.4100000000000000000В расписании таких поездов нет.5-20182732Ошибка! Номер поезда введен неверно! Введите заново:
Таблица 2
       Тестирование поиска по станции отправления
№ тестаТестовые данныеРезультат работы программы1Холодильники№ поезда: 1037
Маршрут: Холодильники - ул.Куликова
Время отправления: 11:20
Время прибытия: 11:50

№ поезда: 1001
Маршрут: Холодильники - п.Советский
Время отправления: 13:00
Время прибытия: 14:102Площадь ЛенинаВ расписании нет таких станций отправления.3-3945В расписании нет таких станций отправления.41001В расписании нет таких станций отправления.5@@@В расписании нет таких станций отправления.
Таблица 3
       Тестирование поиска по станции прибытия
№ тестаТестовые данныеРезультат работы программы1Карагали
№ поезда: 3802
Маршрут: Стадион - Карагали
Время отправления: 17:00
Время прибытия: 18:00220394В расписании нет таких станций прибытия.3#####В расписании нет таких станций прибытия.4ТЦ "Сити"В расписании нет таких станций прибытия.5-303201В расписании нет таких станций прибытия.



Таблица 4
       Тестирование добавления новых путей в расписание
№ тестаТестовые данныеРезультат работы программы1Номер поезда: 8004
Станция отправления: ТЦ"Три кота"
Станция прибытия: Карагали
Время отправления:
Час: 7
Минуты: 30
Время прибытия:
Час: 8
Минуты: 30Добавление данных в текстовый файл.2Номер поезда: -123Ошибка! Номер поезда введен неверно! Введите заново:3Номер поезда: 5234
Станция отправления: Стадион
Станция прибытия: Три Протока
Время отправления:
Час: 26Часы введены неверно! Введите заново:4Номер поезда: 5234
Станция отправления: Стадион
Станция прибытия: Три Протока
Время отправления:
Час: 14
Минуты: 60Минуты введены неверно! Введите заново:5Номер поезда: 5234
Станция отправления: Стадион
Станция прибытия: Три Протока
Время отправления:
Час: 14
Минуты: 50
Время прибытия:
Час: -394Часы введены неверно! Введите заново:6Номер поезда: 5234
Станция отправления: Стадион
Станция прибытия: Три Протока
Время отправления:
Час: 14
Минуты: 50
Время прибытия:
Час: 15
Минуты: -1200Минуты введены неверно! Введите заново:       






Таблица 5
       Тестирование удаления путей из существующего расписания
№ тестаТестовые данныеРезультат работы программы1-23Такого расписания нет. Введите другой номер:20Переход в главное меню31033245Такого расписания нет. Введите другой номер:42Удаление следующих данных из текстового файла:
№ поезда: 1037
Маршрут: ул.Куликова - Холодильники
Время отправления: 7:40
Время прибытия: 8:1050000Переход в главное меню






2


